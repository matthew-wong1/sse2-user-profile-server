# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  #
  WEBSITE_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/website
  NGINX_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/nginx
  REGISTRY: ghcr.io

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js '20.x'
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"
          cache: "npm"
      - run: npm ci
      - run: npm run build --if-present
      - run: npm test

  build-docker-image:
    needs: build-and-test
    name: Build the Docker Image
    runs-on: ubuntu-latest
    env:
      AWS_REGION: eu-west-2 # London

    steps:
      - name: checkout main
        uses: actions/checkout@v3

      - name: Set WEBSITE_IMAGE and NGINX_IMAGE
        run: |
          echo "WEBSITE_IMAGE=ghcr.io/${{ github.repository_owner }}/$(echo ${{ github.event.repository.name }} | tr '[:upper:]' '[:lower:]')/website" >> $GITHUB_ENV
          echo "NGINX_IMAGE=ghcr.io/${{ github.repository_owner }}/$(echo ${{ github.event.repository.name }} | tr '[:upper:]' '[:lower:]')/nginx" >> $GITHUB_ENV

      - name: Convert image names to lowercase
        run: |
          echo "WEBSITE_IMAGE=$(echo $WEBSITE_IMAGE | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "NGINX_IMAGE=$(echo $NGINX_IMAGE | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set environment variables to .env
        run: |
          echo "WEBSITE_IMAGE=$(echo ${{env.WEBSITE_IMAGE}} )" >> $GITHUB_ENV
          echo "NGINX_IMAGE=$(echo ${{env.NGINX_IMAGE}} )" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to AWS ECR
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/j1z8j5v0

      - name: Build images
        run: |
          docker-compose -f Docker-compose.ci.yml build
        env:
          WEBSITE_IMAGE: ${{ env.WEBSITE_IMAGE }}
          NGINX_IMAGE: ${{ env.NGINX_IMAGE }}

      - name: List Docker images (for debugging)
        run: docker images

      - name: Tag images
        run: |
          docker tag sse2-user-profile-server:latest public.ecr.aws/j1z8j5v0/sse2-user-profile-server:latest
